#!/usr/bin/env bash

set -eu

# ________________________________________________________________________
# User-defined strings

# Edit these variables to change the name of the ROOT file produced...
ROOT_DB_FILE=BTagCalibRUN2-test.root
# ...and the name of the calibraiton tag...
TAG_NAME=BTagCalibRUN2-test
# ...and the Athena version.
ATH_SETUP_CMD=20.1.6.3,AtlasDerivation,gcc48,here

# Change this if you want to see the output
OUT_LOG=/dev/null

# _______________________________________________________________________
# Main program starts here (you shouldn't have to edit this)

function _usage() {
    echo "usage $0 <base ROOT file> [<text file to add>]"
}

function _help() {
    cat <<EOF

Script to make the creation of b-tagging calibration files less painful

To use you'll need:
 - A base ROOT file which contains calibrations for the existing
   taggers.
 - Optionally: a text file which you want to add to that file.

This script will:
 - Check if the base ROOT file already has a GUID set. If so, it
   will be removed.
 - Convert the text file to a ROOT file using the included python
   script. This file will have the same name as the text file, with
   the extension replaced with '.root'
 - Call 'hadd' to combine the base ROOT file with the new ROOT
   file. The resulting file will be called $ROOT_DB_FILE.
 - Set the (new) GUID for this file, and insert the file into the local pool
   file catalogue.
 - Create a local database file and set the appropriate channels.

You'll have to add several lines to your JO file to use the resulting DB:

"""
BTaggingFlags.CalibrationFromLocalReplica = True
BTaggingFlags.CalibrationFolderRoot = '/GLOBAL/BTagCalib/'
BTaggingFlags.CalibrationTag = '$TAG_NAME'
"""

To change '$TAG_NAME' and '$ROOT_DB_FILE', edit this script.

EOF
}

DIR=$(dirname $0)

# Arg 1 is the base calibration file, arg 2 is the text file. If the
# text file is given, we need to build a ROOT file.
if [[ $# == 2 ]]; then
    if [[ $1 != *.root ]]; then
	echo "ERROR: first arg should have extension .root" >&2
	exit 1
    fi
    if [[ $2 == *.root ]]; then
	echo "ERROR: second arg should have a text file extension, e.g. .json" >&2
	exit 1
    fi
    echo "check for existing GUID in input ROOT calibration file..."
    NEW_ROOT_FILE=${2%%.}.root
    python $DIR/removeExistingGUID.py $1 2> $OUT_LOG
    echo "building ROOT file from text..."
    python $DIR/addTextFileToRoot.py -v 0 $2 2> $OUT_LOG
    if [[ -f $ROOT_DB_FILE ]]; then
	echo "$ROOT_DB_FILE already exists, removing..."
	rm $ROOT_DB_FILE
    fi

    # Hadd the ROOT files together.
    if ! hadd $ROOT_DB_FILE $NEW_ROOT_FILE $1 &> $OUT_LOG; then
	echo "error in hadd!" >&2
	exit 1
    fi
elif [[ $# == 1 ]]; then
    # if no text file is given, just copy the base ROOT file
    cp $1 $ROOT_DB_FILE
else
    _usage
    _help
    exit 1
fi

# ATLAS setup check
if [[ ! $ATLAS_LOCAL_ASETUP_VERSION ]]; then
    echo -n "Please set up Athena first."
    exit 1
else
    echo "ATLAS environment is already setup in $TestArea"
    mv $ROOT_DB_FILE $TestArea/$ROOT_DB_FILE
    cd $TestArea
fi

# Associate a GUID to this file
echo "setting file GUID"
coolHist_setFileIdentifier.sh $ROOT_DB_FILE | grep GUID

# Insert the calibration ROOT file into a local COOL file catalogue:
echo "inserting file into pool catalogue..."
coolHist_insertFileToCatalog.py $ROOT_DB_FILE > $OUT_LOG

# Generate a local database
echo "generating local database file..."
coolHist_setReference.py OFLP200 /GLOBAL/BTagCalib/RUN12 1 $TAG_NAME \
			 $ROOT_DB_FILE > $OUT_LOG

# Open it to define its channel
echo "setting channel..."
expect <<EOF > $OUT_LOG
spawn AtlCoolConsole.py "sqlite://;schema=mycool.db;dbname=OFLP200"
expect ">>>"
send "setchan /GLOBAL/BTagCalib/RUN12 1 RUN12\n"
expect ">>>"
send "exit\n"
expect eof
EOF

# go back to the directory we started in
cd $DIR

echo "done!"
